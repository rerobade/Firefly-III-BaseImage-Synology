# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

parameters:
- name: buildPhpVersion
  displayName: Build PHP version
  type: string
  default: 8.1
- name: buildImageType
  displayName: Build image type
  type: string
  default: apache
- name: platforms
  displayName: Build platforms
  type: string
  default: linux/amd64,linux/arm64,linux/arm/v7,linux/386
- name: repository
  displayName: Repository name
  type: string
  default: fireflyiii/base


jobs:
- job: Jobbie
  timeoutInMinutes: 360
  pool:
    vmImage: 'ubuntu-16.04'
    name: Default
  steps:
  - checkout: self
    persistCredentials: true

  - script: |
      docker buildx prune --force
      docker container stop $(docker container ls -a -f name=builder --format="{{.ID}}")
      docker container rm $(docker container ls -a -f name=builder --format="{{.ID}}")
    displayName: 'Prune and remove old builder.'

  - script: |
      cd BaseImage
      php generate-docker-files.php ${{ parameters.buildImageType }} ${{ parameters.buildPhpVersion }}
    displayName: 'Run script to generate docker files.'

  - script: |
      cd BaseImage
      git checkout main
      git pull
      git status
      git add ${{ parameters.buildImageType }}-${{ parameters.buildPhpVersion }}/
      git commit -m "Auto-update build files."
      git push
    displayName: 'Commit changed to Git.'

  - script: |
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes i
      docker buildx create --name firefly_iii_builder
      docker buildx inspect firefly_iii_builder --bootstrap
      docker buildx use firefly_iii_builder
    displayName: 'Set up builder'

  - script: |
      cd BaseImage
      echo $(DOCKERPASSWORD) | docker login --username $(DOCKERUSERNAME) --password-stdin
      cd ${{ parameters.buildImageType }}-${{ parameters.buildPhpVersion }}/
      docker buildx build  --no-cache --progress=plain --platform ${{ parameters.platforms }} -t ${{ parameters.repository }}:${{ parameters.buildImageType }}-${{ parameters.buildPhpVersion }} --push . -f Dockerfile
    displayName: 'Build!'

  - checkout: self
    clean: true